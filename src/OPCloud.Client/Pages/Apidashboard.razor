@page "/apidashboard"
@using AntDesign.Charts
@using Microsoft.AspNetCore.SignalR.Client
@using OPCloud.Client.Models
@using Title = AntDesign.Charts.Title
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<Tabs ActiveKeyChanged="OnTabChanged">
    <TabPane Key="1">
        <TabTemplate>Example 1</TabTemplate>
        <ChildContent>
            <Line @ref="chart1" Data="dataList" Config="config1" />
        </ChildContent>
    </TabPane>
</Tabs>

@code {
    IChartComponent chart1;
    private object[] dataList = Array.Empty<object>();
    private List<List<object>> buffer = new();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {


        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/instrumentHub"))
            .WithAutomaticReconnect()
            .Build();

        await base.OnInitializedAsync();

        hubConnection.On<List<InstrumentData>>("NewInstrument", async (lista) =>
        {
            var bloque = lista.Select(data => (object)new
            {
                dateTime = data.FechaActual.ToString("HH:mm:ss"),
                value = data.ValorActual,
                serie = data.NombreSensor
            }).ToList();

            // Agregar lote al buffer
            buffer.Add(bloque);

            // Mantener solo los últimos 5 lotes
            if (buffer.Count > 5)
            {
                buffer = buffer.Skip(buffer.Count - 5).ToList();
            }

            // Aplanar los lotes en un solo array para el gráfico
            dataList = buffer.SelectMany(b => b).ToArray();

            OnTabChanged("1");
        });

        await hubConnection.StartAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (firstRender)
        {
            var initialBuffer = await HttpClient.GetFromJsonAsync<List<InstrumentData>>("api/instrument/today");

            if (initialBuffer is not null && initialBuffer.Any())
            {
                var bloque = initialBuffer.Select(data => (object)new
                {
                    dateTime = data.FechaActual.ToString("HH:mm:ss"),
                    value = data.ValorActual,
                    serie = data.NombreSensor
                }).ToList();

                buffer.Add(bloque);

                // Mantener solo los últimos 5 bloques
                if (buffer.Count > 5)
                {
                    buffer = buffer.Skip(buffer.Count - 5).ToList();
                }

                // Aplanar bloques
                dataList = buffer.SelectMany(b => b).ToArray();

                // Forzar actualización del gráfico
                await OnTabChanged("1");
            }
        }
    }


    private async Task OnTabChanged(string activeKey)
    {
        if (activeKey == "1")
        {
            if (chart1 is not null)
                await chart1.ChangeData(dataList);

            StateHasChanged();
        }
    }

    readonly LineConfig config1 = new LineConfig
    {
        /*Title = new Title
        {
            Visible = true,
            Text = "Sensores dinámicos"
        },*/
        //ForceFit = true,
        Padding = "auto",
        XField = "dateTime",
        YField = "value",
        SeriesField = "serie", // si quieres varias series, aquí va la etiqueta
        //XAxis = new ValueCatTimeAxis
        //{
        //    Type = "timeCat",
        //    TickCount = 5,
        //    TickInterval = 1,
        //},
        Point = new LineViewConfigPoint
        {
            Visible = true
        },
        Label = new Label
        {
            Visible = true,
            //Type = "point"
        }
    };
}
